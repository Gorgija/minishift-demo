---
apiVersion: v1
kind: Template
labels:
  template: nodejs-example
message: |-
  The following service(s) have been created in your project: ${NAME}.

  For more information about using this template, including OpenShift considerations, see https://github.com/openshift/nodejs-ex/blob/master/README.md.
metadata:
  annotations:
    description: An example Node.js application with no database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/nodejs-ex/blob/master/README.md.
    iconClass: icon-nodejs
    openshift.io/display-name: Node.js
    tags: quickstart,nodejs
    template.openshift.io/documentation-url: https://github.com/openshift/nodejs-ex
    template.openshift.io/long-description: This template defines resources needed to develop a NodeJS application, including a build configuration and application deployment configuration. It does not include a database.
    template.openshift.io/provider-display-name: Red Hat, Inc.
    template.openshift.io/support-url: https://access.redhat.com
  name: nodejs-example
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
    name: "${NAME}"
  spec:
    ports:
    - name: http
      port: 8080
      targetPort: 8080
    selector:
      name: "${NAME}"
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NAME}"
  spec:
    host: "${APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: "${NAME}"
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: "${NAME}"
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
    name: "${NAME}"
  spec:
    runPolicy: Serial
    output:
      to:
        kind: ImageStreamTag
        name: "${NAME}:latest"
    source:
      type: Binary
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: "${IMAGE}"
          namespace: "${NAMESPACE}"
        incremental: true
        env:
        - name: "BUILD_LOGLEVEL"
          value: "5"
    triggers:
    - type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
    name: "${NAME}"
  spec:
    replicas: 1
    selector:
      name: "${NAME}"
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: "${NAME}"
        name: "${NAME}"
      spec:
        containers:
        - env: []
          image: ""
          livenessProbe:
            httpGet:
              path: "${PROBE}"
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          name: nodejs-example
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: "${PROBE}"
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - nodejs-example
        from:
          kind: ImageStreamTag
          name: "${NAME}:latest"
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: nodejs-example
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: minishift-demo
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Set this to the relative path to your project if it is not in the root of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
  value: ''
- description: The path of the readiness probe and liveness probe
  displayName: Path Probe
  name: PROBE
  value: ''
- description: The name of the Docker image
  displayName: Image name
  name: IMAGE
  required: true
  value: node:latest